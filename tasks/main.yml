---
# include tasks from license-api.yml
- include_tasks: license-api.yml
  tags: license

- include_tasks: security-anonymous-api.yml
  tags: security-anonymous-access

- include_tasks: user-tokens-api.yml
  when: nexus_enable_pro | bool
  tags: user-tokens

- name: Initialize empty array for assets to be updated
  set_fact:
    maven_hosted_repos_to_update: []
    maven_proxy_repos_to_update: []
    maven_group_repos_to_update: []
    nexus_repos_cleanup_policies_to_update: []
    nexus_routing_rules_to_update: []
    nexus_users_to_update: []
    nexus_content_selectors_to_update: []
    nexus_roles_to_update: []
    nexus_file_blobstores_to_update: []
  tags: always

########### Blobstores ###########

- name: Get all Blobstores
  uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/blobstores"
    method: GET
    validate_certs: false
    status_code: 200
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
  register: __nexus_blobstores__
  tags: blobstores

- name: Show __nexus_blobstores__
  debug:
    var: __nexus_blobstores__
  tags: blobstores

- name: Filter existing blobstores
  set_fact:
    # The type is case sensitive!
    existing_file_blobstores: "{{ __nexus_blobstores__.json | selectattr('type', 'equalto', 'File') | list }}"
    #existing_s3_blobstores: "{{ __nexus_blobstores__.json | selectattr('type', 'equalto', 'S3') | list }}"
    #existing_azure_blobstores: "{{ __nexus_blobstores__.json | selectattr('type', 'equalto', 'Azure') | list }}"
  tags: blobstores

- name: Determine blobstores to create
  set_fact:
    nexus_file_blobstores_to_create: "{{ nexus_blobstores | rejectattr('name', 'in', existing_file_blobstores | map(attribute='name') | list) | list }}"
    #nexus_s3_blobstores_to_create: "{{ nexus_blobstores | rejectattr('name', 'in', existing_s3_blobstores | map(attribute='name') | list) | list }}"
    #nexus_azure_blobstores_to_create: "{{ nexus_blobstores | rejectattr('name', 'in', existing_azure_blobstores | map(attribute='name') | list) | list }}"
  tags: blobstores

- name: Determine blobstores to delete
  set_fact:
    nexus_file_blobstores_to_delete: "{{ existing_file_blobstores | rejectattr('name', 'in', nexus_blobstores | map(attribute='name') | list) | list }}"
    #nexus_s3_blobstores_to_delete: "{{ existing_s3_blobstores | rejectattr('name', 'in', nexus_blobstores | map(attribute='name') | list) | list }}"
    #nexus_azure_blobstores_to_delete: "{{ existing_azure_blobstores | rejectattr('name', 'in', nexus_blobstores | map(attribute='name') | list) | list }}"
  tags: blobstores

# This wont work because the GET blobstores API does not return the path.
# Have to get all blobnames, then get each blobstore by name to get the path.
- name: Compare file blobstores for changes
  set_fact:
    nexus_file_blobstores_to_update: "{{ nexus_file_blobstores_to_update + [ item ] }}"
  loop: "{{ nexus_blobstores | selectattr('type', 'equalto', 'file') | list }}"
  when: >
    ( existing_file_blobstores | selectattr('name', 'equalto', item.name) | first) is not defined or
    ( existing_file_blobstores | selectattr('name', 'equalto', item.name) | first).softQuota.limit | default(omit) != item.softQuota.limit | default(omit) or
    ( existing_file_blobstores | selectattr('name', 'equalto', item.name) | first).softQuota.type | default(omit) != item.softQuota.type | default(omit)
    ( existing_file_blobstores | selectattr('name', 'equalto', item.name) | first).path | default(omit) != item.type | default(omit) or
  tags: blobstores

- name: Show nexus_file_blobstores_to_create
  debug:
    var: nexus_file_blobstores_to_create | length
  tags: blobstores

# - name: Show nexus_s3_blobstores_to_create
#   debug:
#     var: nexus_s3_blobstores_to_create | length
#   tags: blobstores

# - name: Show nexus_azure_blobstores_to_create
#   debug:
#     var: nexus_azure_blobstores_to_create | length
#   tags: blobstores

- name: Show nexus_file_blobstores_to_update
  debug:
    var: nexus_file_blobstores_to_update | length
  tags: blobstores

# - name: Show nexus_s3_blobstores_to_update
#   debug:
#     var: nexus_s3_blobstores_to_update | length
#   tags: blobstores

# - name: Show nexus_azure_blobstores_to_update
#   debug:
#     var: nexus_azure_blobstores_to_update | length
#   tags: blobstores

- name: Show nexus_file_blobstores_to_delete
  debug:
    var: nexus_file_blobstores_to_delete | length
  tags: blobstores

# - name: Show nexus_s3_blobstores_to_delete
#   debug:
#     var: nexus_s3_blobstores_to_delete | length
#   tags: blobstores

# - name: Show nexus_azure_blobstores_to_delete
#   debug:
#     var: nexus_azure_blobstores_to_delete | length
#   tags: blobstores

- name: Create configured File Blobstores using Nexus API
  ansible.builtin.include_tasks: blobstores-api.yml
  vars:
    blobstores: "{{ item | default([]) }}"
    type: file
    method: POST
  with_items:
    - "{{ nexus_file_blobstores_to_create | default([]) }}"
  when: nexus_file_blobstores_to_create | length > 0
  tags: blobstores

# - name: Create configured S3 Blobstores using Nexus API
#   ansible.builtin.include_tasks: blobstores-api.yml
#   vars:
#     blobstores: "{{ item | default([]) }}"
#     type: s3
#     method: POST
#   with_items:
#     - "{{ nexus_s3_blobstores_to_create | default([]) }}"
#   when: nexus_s3_blobstores_to_create | length > 0
#   tags: blobstores

# - name: Create configured Azure Blobstores using Nexus API
#   ansible.builtin.include_tasks: blobstores-api.yml
#   vars:
#     blobstores: "{{ item | default([]) }}"
#     type: azure
#     method: POST
#   with_items:
#     - "{{ nexus_azure_blobstores_to_create | default([]) }}"
#   when: nexus_azure_blobstores_to_create | length > 0
#   tags: blobstores

- name: Delete File Blobstores using Nexus API
  ansible.builtin.include_tasks: blobstores-api.yml
  vars:
    blobstores: "{{ item | default([]) }}"
    type: file
    method: DELETE
  with_items:
    - "{{ nexus_file_blobstores_to_delete | default([]) }}"
  when: nexus_file_blobstores_to_delete | length > 0
  tags: blobstores

# - name: Delete S3 Blobstores using Nexus API
#   ansible.builtin.include_tasks: blobstores-api.yml
#   vars:
#     blobstores: "{{ item | default([]) }}"
#     type: s3
#     method: DELETE
#   with_items:
#     - "{{ nexus_s3_blobstores_to_delete | default([]) }}"
#   when: nexus_s3_blobstores_to_delete | length > 0
#   tags: blobstores

# - name: Delete Azure Blobstores using Nexus API
#   ansible.builtin.include_tasks: blobstores-api.yml
#   vars:
#     blobstores: "{{ item | default([]) }}"
#     type: azure
#     method: DELETE
#   with_items:
#     - "{{ nexus_azure_blobstores_to_delete | default([]) }}"
#   when: nexus_azure_blobstores_to_delete | length > 0
#   tags: blobstores

- name: Update File Blobstores using Nexus API
  ansible.builtin.include_tasks: blobstores-api.yml
  vars:
    blobstores: "{{ item | default([]) }}"
    type: file
    method: PUT
  with_items:
    - "{{ nexus_file_blobstores_to_update | default([]) }}"
  when: nexus_file_blobstores_to_update | length > 0
  tags: blobstores

############ End Blobstores ############

########### Roles ###########

- name: Get all Roles
  uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/security/roles"
    method: GET
    validate_certs: false
    status_code: 200
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
  register: __nexus_roles__
  tags: roles

- name: Determine roles to create
  set_fact:
    nexus_roles_to_create: "{{ nexus_roles | rejectattr('name', 'in', __nexus_roles__.json | map(attribute='name') | list) | list }}"
  tags: roles

- name: Determine roles to delete
  set_fact:
    nexus_roles_to_delete: "{{ __nexus_roles__.json | rejectattr('name', 'in', nexus_roles | map(attribute='name') | list) | list }}"
  tags: roles

- name: Compare roles for changes
  set_fact:
    nexus_roles_to_update: "{{ nexus_roles_to_update + [ item ] }}"
  loop: "{{ nexus_roles | list }}"
  when: >
    ( __nexus_roles__.json | selectattr('id', 'equalto', item.id) | first) is not defined or
    ( __nexus_roles__.json | selectattr('id', 'equalto', item.id) | first).name | default(omit) != item.name | default(omit) or
    ( __nexus_roles__.json | selectattr('id', 'equalto', item.id) | first).description | default(omit) != item.description | default(omit) or
    ( __nexus_roles__.json | selectattr('id', 'equalto', item.id) | first).privileges | default([]) | sort != item.privileges | default([]) | sort or
    ( __nexus_roles__.json | selectattr('id', 'equalto', item.id) | first).roles | default([]) | sort != item.roles | default([]) | sort
  tags: roles

- name: Show nexus_roles_to_create
  debug:
    var: nexus_roles_to_create | length
  tags: roles

- name: Show nexus_roles_to_update
  debug:
    var: nexus_roles_to_update | length
  tags: roles

- name: Show nexus_roles_to_delete
  debug:
    var: nexus_roles_to_delete | length
  tags: roles

- name: Create configured Roles using Nexus API
  ansible.builtin.include_tasks: roles-api.yml
  vars:
    roles: "{{ item | default([]) }}"
    method: POST
  with_items:
    - "{{ nexus_roles_to_create | default([]) }}"
  when: nexus_roles_to_create | length > 0
  tags: roles

- name: Update configured Roles using Nexus API
  ansible.builtin.include_tasks: roles-api.yml
  vars:
    roles: "{{ item | default([]) }}"
    method: PUT
  with_items:
    - "{{ nexus_roles_to_update | default([]) }}"
  when: nexus_roles_to_update | length > 0
  tags: roles

- name: Delete Roles using Nexus API
  ansible.builtin.include_tasks: roles-api.yml
  vars:
    roles: "{{ item | default([]) }}"
    method: DELETE
  with_items:
    - "{{ nexus_roles_to_delete | default([]) }}"
  when: nexus_roles_to_delete | length > 0
  tags: roles

############ End Roles ############

########### Content Selectors ###########

- name: Get all Content Selectors
  uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/security/content-selectors"
    method: GET
    validate_certs: false
    status_code: 200
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
  register: __nexus_content_selectors__
  tags: content-selectors

- name: Determine content selectors to create
  set_fact:
    nexus_content_selectors_to_create: "{{ nexus_content_selectors | rejectattr('name', 'in', __nexus_content_selectors__.json | map(attribute='name') | list) | list }}"
  tags: content-selectors

- name: Determine content selectors to delete
  set_fact:
    nexus_content_selectors_to_delete: "{{ __nexus_content_selectors__.json | rejectattr('name', 'in', nexus_content_selectors | map(attribute='name') | list) | list }}"
  tags: content-selectors

- name: Compare content selectors for changes
  set_fact:
    nexus_content_selectors_to_update: "{{ nexus_content_selectors_to_update + [ item ] }}"
  loop: "{{ nexus_content_selectors | list }}"
  when: >
    ( __nexus_content_selectors__.json | selectattr('name', 'equalto', item.name) | first) is not defined or
    ( __nexus_content_selectors__.json | selectattr('name', 'equalto', item.name) | first).description | default(omit) != item.description | default(omit) or
    ( __nexus_content_selectors__.json | selectattr('name', 'equalto', item.name) | first).type | default(omit) != item.type | default(omit) or
    ( __nexus_content_selectors__.json | selectattr('name', 'equalto', item.name) | first).expression | default(omit) != item.expression | default(omit)
  tags: content-selectors

- name: Show nexus_content_selectors_to_create
  debug:
    var: nexus_content_selectors_to_create | length
  tags: content-selectors

- name: Show nexus_content_selectors_to_update
  debug:
    var: nexus_content_selectors_to_update | length
  tags: content-selectors

- name: Show nexus_content_selectors_to_delete
  debug:
    var: nexus_content_selectors_to_delete | length
  tags: content-selectors

- name: Create configured Content Selectors using Nexus API
  ansible.builtin.include_tasks: content-selectors-api.yml
  vars:
    selectors: "{{ item | default([]) }}"
    method: POST
  with_items:
    - "{{ nexus_content_selectors_to_create | default([]) }}"
  when: nexus_content_selectors_to_create | length > 0
  tags: content-selectors

- name: Update configured Content Selectors using Nexus API
  ansible.builtin.include_tasks: content-selectors-api.yml
  vars:
    selectors: "{{ item | default([]) }}"
    method: PUT
  with_items:
    - "{{ nexus_content_selectors_to_update | default([]) }}"
  when: nexus_content_selectors_to_update | length > 0
  tags: content-selectors

- name: Delete Content Selectors using Nexus API
  ansible.builtin.include_tasks: content-selectors-api.yml
  vars:
    selectors: "{{ item | default([]) }}"
    method: DELETE
  with_items:
    - "{{ nexus_content_selectors_to_delete | default([]) }}"
  when: nexus_content_selectors_to_delete | length > 0
  tags: content-selectors

############ End Content Selectors ############

########### Users ############

- name: Get all Users
  ansible.builtin.uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/security/users"
    method: GET
    validate_certs: false
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
    status_code: 200
  register: __nexus_existing_users__
  tags: users

- name: Determine users to create
  set_fact:
    nexus_users_to_create: "{{ nexus_users | rejectattr('userId', 'in', __nexus_existing_users__.json | map(attribute='userId') | list) | list }}"
  tags: users

- name: Determine users to delete
  set_fact:
    nexus_users_to_delete: "{{ __nexus_existing_users__.json | rejectattr('userId', 'in', nexus_users | map(attribute='userId') | list) | list }}"
  tags: users

- name: Compare users for changes
  set_fact:
    nexus_users_to_update: "{{ nexus_users_to_update + [ item ] }}"
  loop: "{{ nexus_users | list }}"
  # TODO: implement AND TEST readOnly attribute
  when: >
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first) is not defined or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).firstName | default(omit) != item.firstName | default(omit) or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).lastName | default(omit) != item.lastName | default(omit) or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).emailAddress | default(omit) != item.emailAddress | default(omit) or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).source | default(omit) != item.source | default(omit) or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).status | default(omit) != item.status | default(omit) or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).roles | default([]) | sort != item.roles | default([]) | sort or
    ( __nexus_existing_users__.json | selectattr('userId', 'equalto', item.userId) | first).externalRoles | default([]) | sort != item.externalRoles | default([]) | sort
  tags: users

- name: Show nexus_users_to_create
  debug:
    var: nexus_users_to_create | length
  tags: users

- name: Show nexus_users_to_update
  debug:
    var: nexus_users_to_update | length
  tags: users

- name: Show nexus_users_to_delete
  debug:
    var: nexus_users_to_delete | length
  tags: users

- name: Create configured Users using Nexus API
  ansible.builtin.include_tasks: users-api.yml
  vars:
    users: "{{ item | default([]) }}"
    method: POST
  with_items:
    - "{{ nexus_users_to_create | default([]) }}"
  when: nexus_users_to_create | length > 0
  tags: users

- name: Update configured Users using Nexus API
  ansible.builtin.include_tasks: users-api.yml
  vars:
    users: "{{ item | default([]) }}"
    method: PUT
  with_items:
    - "{{ nexus_users_to_update | default([]) }}"
  when: nexus_users_to_update | length > 0
  tags: users

- name: Delete Users using Nexus API
  ansible.builtin.include_tasks: users-api.yml
  vars:
    users: "{{ item | default([]) }}"
    method: DELETE
  with_items:
    - "{{ nexus_users_to_delete | default([]) }}"
  when: nexus_users_to_delete | length > 0
  tags: users

############ End Users ############

############ Cleanup Policies ############

- name: Get all Cleanup policies
  uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/cleanup-policies"
    method: GET
    validate_certs: false
    status_code: 200
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
  register: __nexus_cleanup_policies__
  when: nexus_enable_pro | bool
  tags: cleanup-policies

- name: Determine cleanup policies to create
  set_fact:
    nexus_repos_cleanup_policies_to_create: "{{ nexus_repos_cleanup_policies | rejectattr('name', 'in', __nexus_cleanup_policies__.json | map(attribute='name') | list) | list }}"
  when: nexus_enable_pro | bool
  tags: cleanup-policies

- name: Determine cleanup policies to delete
  set_fact:
    nexus_repos_cleanup_policies_to_delete: "{{ __nexus_cleanup_policies__.json | rejectattr('name', 'in', nexus_repos_cleanup_policies | map(attribute='name') | list) | list }}"
  when: nexus_enable_pro | bool
  tags: cleanup-policies

- name: Compare cleanup policies for changes
  set_fact:
    nexus_repos_cleanup_policies_to_update: "{{ nexus_repos_cleanup_policies_to_update + [ item ] }}"
  loop: "{{ nexus_repos_cleanup_policies | list }}"
  when: >
    nexus_enable_pro | bool and (
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first) is not defined or
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first).criteriaLastBlobUpdated | default(omit) != item.criteriaLastBlobUpdated | default(None) or
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first).criteriaLastDownloaded | default(omit) != item.criteriaLastDownloaded | default(None) or
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first).criteriaAssetRegex | default(omit) != item.criteriaAssetRegex | default(None) or
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first).criteriaReleaseType | default(omit) != item.criteriaReleaseType | default(None) or
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first).notes | default(omit) != item.notes | default(None) or
    ( __nexus_cleanup_policies__.json | selectattr('name', 'equalto', item.name) | first).format | default(omit) != item.format | default(None))
  tags: cleanup-policies

- name: Show nexus_repos_cleanup_policies_to_create
  debug:
    var: nexus_repos_cleanup_policies_to_create | length
  when: nexus_enable_pro | bool
  tags: cleanup-policies

- name: Show nexus_repos_cleanup_policies_to_update
  debug:
    var: nexus_repos_cleanup_policies_to_update | length
  when: nexus_enable_pro | bool
  tags: cleanup-policies

- name: Show nexus_repos_cleanup_policies_to_delete
  debug:
    var: nexus_repos_cleanup_policies_to_delete | length
  when: nexus_enable_pro | bool
  tags: cleanup-policies

- name: Create configured Cleanup Policies using Nexus API
  ansible.builtin.include_tasks: cleanup-policies-api.yml
  vars:
    policies: "{{ item | default([]) }}"
    method: POST
  with_items:
    - "{{ nexus_repos_cleanup_policies_to_create | default([]) }}"
  when: nexus_repos_cleanup_policies_to_create | length > 0 and nexus_enable_pro | bool
  tags: cleanup-policies

- name: Update configured Cleanup Policies using Nexus API
  ansible.builtin.include_tasks: cleanup-policies-api.yml
  vars:
    policies: "{{ item | default([]) }}"
    method: PUT
  with_items:
    - "{{ nexus_repos_cleanup_policies_to_update | default([]) }}"
  when: nexus_repos_cleanup_policies_to_update | length > 0 and nexus_enable_pro | bool
  tags: cleanup-policies

- name: Delete Cleanup Policies using Nexus API
  ansible.builtin.include_tasks: cleanup-policies-api.yml
  vars:
    policies: "{{ item | default([]) }}"
    method: DELETE
  with_items:
    - "{{ nexus_repos_cleanup_policies_to_delete | default([]) }}"
  when: nexus_repos_cleanup_policies_to_delete | length > 0 and nexus_enable_pro | bool
  tags: cleanup-policies

############ END Cleanup Policies ############

############ Routing Rules ############

- name: Get all routing rules
  uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/routing-rules"
    method: GET
    validate_certs: false
    status_code: 200
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
  register: __nexus_routing_rules__
  tags: routing-rules

- name: Determine routing rules to create
  set_fact:
    nexus_routing_rules_to_create: "{{ nexus_routing_rules | rejectattr('name', 'in', __nexus_routing_rules__.json | map(attribute='name') | list) | list }}"
  tags: routing-rules

- name: Determine routing rules to delete
  set_fact:
    nexus_routing_rules_to_delete: "{{ __nexus_routing_rules__.json | rejectattr('name', 'in', nexus_routing_rules | map(attribute='name') | list) | list }}"
  tags: routing-rules

- name: Compare routing rules for changes
  set_fact:
    nexus_routing_rules_to_update: "{{ nexus_routing_rules_to_update + [ item ] }}"
  loop: "{{ nexus_routing_rules | list }}"
  when: >
    ( __nexus_routing_rules__.json | selectattr('name', 'equalto', item.name) | first) is not defined or
    ( __nexus_routing_rules__.json | selectattr('name', 'equalto', item.name) | first).description | default(omit) != item.description | default(omit) or
    ( __nexus_routing_rules__.json | selectattr('name', 'equalto', item.name) | first).mode | default(omit) != item.mode | default(None) or
    ( __nexus_routing_rules__.json | selectattr('name', 'equalto', item.name) | first).matchers | default(omit) != item.matchers | default(omit)
  tags: routing-rules

- name: Show nexus_routing_rules_to_create
  debug:
    var: nexus_routing_rules_to_create | length
  tags: routing-rules

- name: Show nexus_routing_rules_to_update
  debug:
    var: nexus_routing_rules_to_update | length
  tags: routing-rules

- name: Show nexus_routing_rules_to_delete
  debug:
    var: nexus_routing_rules_to_delete | length
  tags: routing-rules

- name: Create configured Routing Rules using Nexus API
  ansible.builtin.include_tasks: routing-rules-api.yml
  vars:
    rules: "{{ item | default([]) }}"
    method: POST
  with_items:
    - "{{ nexus_routing_rules | default([]) }}"
  when: nexus_routing_rules_to_create | length > 0
  tags: routing-rules

- name: Update configured Routing Rules using Nexus API
  ansible.builtin.include_tasks: routing-rules-api.yml
  vars:
    rules: "{{ item | default([]) }}"
    method: PUT
  with_items:
    - "{{ nexus_routing_rules_to_update | default([]) }}"
  when: nexus_routing_rules_to_update | length > 0
  tags: routing-rules

- name: Delete Routing Rules using Nexus API
  ansible.builtin.include_tasks: routing-rules-api.yml
  vars:
    rules: "{{ item | default([]) }}"
    method: DELETE
  with_items:
    - "{{ nexus_routing_rules_to_delete | default([]) }}"
  when: nexus_routing_rules_to_delete | length > 0
  tags: routing-rules

############ END Routing Rules ############

############ Repositories ############

- name: Get all repositories
  uri:
    url: "{{ nexus_protocol }}://{{ nexus_hostname }}:{{ nexus_port }}/service/rest/v1/repositorySettings"
    method: GET
    validate_certs: false
    status_code: 200
    user: "{{ nexus_admin_username }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: true
  register: __nexus_repositories__
  until: __nexus_repositories__.status == 200
  retries: 30
  delay: 10

############ Maven Repositories ############

- name: Process definitions for maven
  when: nexus_config_maven | bool
  block:
    - name: Apply defaults to maven proxy repos
      ansible.builtin.set_fact:
        final_nexus_repos_maven_proxy: >-
          {%- set result = [] -%}
          {%- for repo in nexus_repos_maven_proxy -%}
            {%- set combined_repo = __nexus_repos_maven_proxy_defaults | combine(repo, recursive=True) -%}
              {{ result.append(combined_repo) }}
          {%- endfor -%}
          {{ result | to_json | from_json }}

    # - name: Show final_nexus_repos_maven_proxy
    #   debug:
    #     var: final_nexus_repos_maven_proxy

    - name: Apply defaults to maven hosted repos
      ansible.builtin.set_fact:
        final_nexus_repos_maven_hosted: >-
          {%- set result = [] -%}
          {%- for repo in nexus_repos_maven_hosted -%}
            {%- set combined_repo = __nexus_repos_maven_hosted_defaults | combine(repo, recursive=True) -%}
              {{ result.append(combined_repo) }}
          {%- endfor -%}
          {{ result | to_json | from_json }}

    # - name: Show final_nexus_repos_maven_hosted
    #   debug:
    #     var: final_nexus_repos_maven_hosted

    # - name: Apply defaults to maven group repos
    #   ansible.builtin.set_fact:
    #     nexus_repos_maven_group: >-
    #       {%- set result = [] -%}
    #       {%- for repo in nexus_repos_maven_group -%}
    #         {%- set combined_repo = _nexus_repos_maven_defaults | combine(repo) -%}
    #         {%- set transformed_repo = {
    #           'name': combined_repo.name,
    #           'online': combined_repo.online | default(true),
    #           'storage': {
    #             'blobStoreName': combined_repo.blob_store | default('default'),
    #             'strictContentTypeValidation': combined_repo.strict_content_validation | default(true)
    #           },
    #           'group': {
    #             'memberNames': combined_repo.member_repos | default([])
    #           }
    #         } -%}
    #         {%- if use_api -%}
    #           {{ result.append(transformed_repo) }}
    #         {%- else -%}
    #           {{ result.append(combined_repo) }}
    #         {%- endif -%}
    #       {%- endfor -%}
    #       {{ result | to_json | from_json }}

    # - name: Add maven repositories to global repos list
    #   ansible.builtin.set_fact:
    #     _nexus_repos_global_list: >-
    #       {{
    #         _nexus_repos_global_list | default([])
    #         +
    #         (nexus_repos_maven_proxy | map('combine', {"format": "maven2", "type": "proxy"}) | list)
    #         +
    #         (nexus_repos_maven_hosted | map('combine', {"format": "maven2", "type": "hosted"}) | list)
    #         +
    #         (nexus_repos_maven_group | map('combine', {"format": "maven2", "type": "group"}) | list)
    #       }}
    #     _nexus_repos_maven_proxy: >-
    #       {{
    #         _nexus_repos_maven_proxy | default([])
    #         +
    #         (nexus_repos_maven_proxy | map('combine', {"format": "maven", "type": "proxy"}) | list)
    #       }}
    #     _nexus_repos_maven_hosted: >-
    #       {{
    #         _nexus_repos_maven_hosted | default([])
    #         +
    #         (nexus_repos_maven_hosted | map('combine', {"format": "maven", "type": "hosted"}) | list)
    #       }}
    #     _nexus_repos_maven_group: >-
    #       {{
    #         _nexus_repos_maven_group | default([])
    #         +
    #         (nexus_repos_maven_group | map('combine', {"format": "maven", "type": "group"}) | list)
    #       }}

# Need filtered facts for existing repositories because the API has different endpoints for each type and format

- name: Filter existing repositories
  set_fact:
    existing_maven_hosted_repos: "{{ __nexus_repositories__.json | selectattr('format', 'equalto', 'maven2') | selectattr('type', 'equalto', 'hosted') | list }}"
    existing_maven_proxy_repos: "{{ __nexus_repositories__.json | selectattr('format', 'equalto', 'maven2') | selectattr('type', 'equalto', 'proxy') | list }}"
    existing_maven_group_repos: "{{ __nexus_repositories__.json | selectattr('format', 'equalto', 'maven2') | selectattr('type', 'equalto', 'group') | list }}"

- name: Show existing_maven_proxy_repos
  debug:
    var: existing_maven_proxy_repos

- name: Determine repositories to create
  set_fact:
    maven_hosted_repos_to_create: "{{ final_nexus_repos_maven_hosted | rejectattr('name', 'in', existing_maven_hosted_repos | map(attribute='name') | list) | list }}"
    maven_proxy_repos_to_create: "{{ final_nexus_repos_maven_proxy | rejectattr('name', 'in', existing_maven_proxy_repos | map(attribute='name') | list) | list }}"
    maven_group_repos_to_create: "{{ nexus_repos_maven_group | rejectattr('name', 'in', existing_maven_group_repos | map(attribute='name') | list) | list }}"

- name: Determine repositories to delete
  set_fact:
    maven_hosted_repos_to_delete: "{{ existing_maven_hosted_repos | rejectattr('name', 'in', final_nexus_repos_maven_hosted | map(attribute='name') | list) | list }}"
    maven_proxy_repos_to_delete: "{{ existing_maven_proxy_repos | rejectattr('name', 'in', final_nexus_repos_maven_proxy | map(attribute='name') | list) | list }}"
    maven_group_repos_to_delete: "{{ existing_maven_group_repos | rejectattr('name', 'in', nexus_repos_maven_group | map(attribute='name') | list) | list }}"

- name: Compare maven hosted repositories for changes
  set_fact:
    maven_hosted_repos_to_update: "{{ maven_hosted_repos_to_update + [ item ] }}"
  loop: "{{ final_nexus_repos_maven_hosted | list }}"
  # TODO: implement cleanup policies
  when: >
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first) is not defined or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).format | default('maven2') != item.format | default('maven2') or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).type | default('hosted') != item.type | default('hosted') or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).online | default(true) != item.online | default(true) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).cleanup.policyNames | default(omit) != item.cleanup.policyNames | default(omit) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).storage.blobStoreName | default(omit) != item.storage.blobStoreName | default(None) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).storage.strictContentTypeValidation | default(false) != item.storage.strictContentTypeValidation | default(false) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).storage.writePolicy | default(omit) != item.storage.writePolicy | default(None) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).maven.versionPolicy | default(omit) != item.maven.versionPolicy | default(None) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).maven.layoutPolicy | default(omit) != item.maven.layoutPolicy | default(None) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).maven.contentDisposition | default(omit) != item.maven.contentDisposition | default(None) or
    (existing_maven_hosted_repos | selectattr('name', 'equalto', item.name) | first).component.proprietaryComponents | default(false) != item.component.proprietaryComponents | default(false)

- name: Compare maven proxy repositories for changes
  set_fact:
    maven_proxy_repos_to_update: "{{ maven_proxy_repos_to_update + [ item ] }}"
  loop: "{{ final_nexus_repos_maven_proxy | list }}"
  # TODO: implement replication and authentication
  when: >
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first) is not defined or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).format | default('maven2') != item.format | default('maven2') or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).type | default('proxy') != item.type | default('proxy') or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).online | default(true) != item.online | default(true) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).storage.blobStoreName | default(omit) != item.storage.blobStoreName | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).storage.strictContentTypeValidation | default(false) != item.storage.strictContentTypeValidation | default(false) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).proxy.remoteUrl | default(omit) != item.proxy.remoteUrl | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).proxy.contentMaxAge | default(omit) != item.proxy.contentMaxAge | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).proxy.metadataMaxAge | default(omit) != item.proxy.metadataMaxAge | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).negativeCache.enabled | default(false) != item.negativeCache.enabled | default(false) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).negativeCache.timeToLive | default(omit) != item.negativeCache.timeToLive | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.blocked | default(omit) != item.httpClient.blocked | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.autoBlock | default(false) != item.httpClient.autoBlock | default(false) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.connection.retries | default(omit) != item.httpClient.connection.retries | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.connection.userAgentSuffix | default(omit) != item.httpClient.connection.userAgentSuffix | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.connection.timeout | default(omit) != item.httpClient.connection.timeout | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.connection.enableCircularRedirects | default(omit) != item.httpClient.connection.enableCircularRedirects | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.connection.enableCookies | default(omit) != item.httpClient.connection.enableCookies | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).httpClient.connection.useTrustStore | default(omit) != item.httpClient.connection.useTrustStore | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).maven.versionPolicy | default(omit) != item.maven.versionPolicy | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).maven.layoutPolicy | default(omit) != item.maven.layoutPolicy | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).maven.contentDisposition | default(omit) != item.maven.contentDisposition | default(None) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).cleanup.policyNames | default(omit) != item.cleanup.policyNames | default(omit) or
    (existing_maven_proxy_repos | selectattr('name', 'equalto', item.name) | first).routingRuleName | default(omit) != item.routingRule | default(omit)

- name: Show maven_hosted_repos_to_update
  debug:
    var: maven_hosted_repos_to_update | length

- name: show maven_hosted_repos_to_create
  debug:
    var: maven_hosted_repos_to_create | length

- name: Show maven_hosted_repos_to_delete
  debug:
    var: maven_hosted_repos_to_delete | length

- name: Show maven_proxy_repos_to_update
  debug:
    var: maven_proxy_repos_to_update | length

- name: Create configured Maven Hosted repositories using Nexus API
  ansible.builtin.include_tasks: repositories-api.yml
  vars:
    repos: "{{ item | default([]) }}"
    format: maven
    type: hosted
    method: POST
  with_items:
    - "{{ maven_hosted_repos_to_create | default([]) }}"
  when: maven_hosted_repos_to_create | length > 0

- name: Create configured Maven Proxy repositories using Nexus API
  ansible.builtin.include_tasks: repositories-api.yml
  vars:
    repos: "{{ item | default([]) }}"
    format: maven
    type: proxy
    method: POST
  with_items:
    - "{{ maven_proxy_repos_to_create | default([]) }}"
  when: maven_proxy_repos_to_create | length > 0

- name: Update configured Maven Hosted repositories using Nexus API
  ansible.builtin.include_tasks: repositories-api.yml
  vars:
    repos: "{{ item | default([]) }}"
    format: maven
    type: hosted
    method: PUT
  with_items:
    - "{{ maven_hosted_repos_to_update | default([]) }}"
  when: maven_hosted_repos_to_update | length > 0

- name: Update configured Maven Proxy repositories using Nexus API
  ansible.builtin.include_tasks: repositories-api.yml
  vars:
    repos: "{{ item | default([]) }}"
    format: maven
    type: proxy
    method: PUT
  with_items:
    - "{{ maven_proxy_repos_to_update | default([]) }}"
  when: maven_proxy_repos_to_update | length > 0

- name: Delete Maven Hosted repositories using Nexus API
  ansible.builtin.include_tasks: repositories-api.yml
  vars:
    repos: "{{ maven_hosted_repos_to_delete | default([]) }}"
    format: maven
    type: hosted
    method: DELETE
  with_items:
    - "{{ maven_hosted_repos_to_delete | default([]) }}"
  when: maven_hosted_repos_to_delete | length > 0

- name: Delete Maven Proxy repositories using Nexus API
  ansible.builtin.include_tasks: repositories-api.yml
  vars:
    repos: "{{ maven_proxy_repos_to_delete | default([]) }}"
    format: maven
    type: proxy
    method: DELETE
  with_items:
    - "{{ maven_proxy_repos_to_delete | default([]) }}"
  when: maven_proxy_repos_to_delete | length > 0
