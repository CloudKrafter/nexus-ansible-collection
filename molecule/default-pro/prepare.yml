---
- name: Prepare Nexus3 Pro
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Wait for Nexus writable API endpoint to be available
      ansible.builtin.uri:
        url: "http://localhost:8081/service/rest/v1/status/writable"
        method: GET
        validate_certs: false
        status_code: 200
      register: __nexus_writable__
      until: __nexus_writable__.status == 200
      retries: 30
      delay: 10

    - name: Fetch the admin.password from the nexus3-pro container
      community.docker.docker_container_exec:
        container: nexus3-pro
        command: "cat /nexus-data/admin.password"
      register: __nexus_initial_admin_password__

    - name: Show the admin.password
      ansible.builtin.debug:
        var: __nexus_initial_admin_password__

    - name: Update password of admin user
      ansible.builtin.uri:
        url: "http://localhost:8081/service/rest/v1/security/users/admin/change-password"
        user: admin
        password: "{{ __nexus_initial_admin_password__.stdout }}"
        method: PUT
        force_basic_auth: true
        validate_certs: false
        status_code: 204
        headers:
          Content-Type: text/plain
          accept: application/json
        body: "changeme"
        body_format: raw

    - name: Disable Anonmous access
      ansible.builtin.uri:
        url: "http://localhost:8081/service/rest/v1/security/anonymous"
        user: admin
        password: changeme
        method: PUT
        force_basic_auth: true
        validate_certs: false
        status_code: 200
        body: |
          {
            "enabled": false,
            "userId": "anonymous",
            "realmName": "NexusAuthorizingRealm"
          }
        body_format: json

    - name: Install MinIO Client
      block:
        - name: Download MinIO Client
          ansible.builtin.get_url:
            url: https://dl.min.io/client/mc/release/linux-amd64/mc
            dest: /usr/local/bin/mc
            mode: '0755'
          become: true

        - name: Configure MinIO CLI
          ansible.builtin.command: |
            mc alias set s3-storage http://localhost:9000 minioadmin minioadmin
          register: minio_cli_configured
          changed_when: "'s3-storage' not in minio_cli_configured.stdout"

        - name: Show minio_cli_configured
          ansible.builtin.debug:
            var: minio_cli_configured

    - name: Remove license from file system
      ansible.builtin.file:
        path: "nexus.lic"
        state: absent

    # - name: Gather facts about the s3-storage-pro container
    #   community.docker.docker_container_info:
    #     name: s3-storage-pro
    #   register: s3_storage_info

    # - name: Set s3_storage_ip variable
    #   ansible.builtin.set_fact:
    #     s3_storage_ip: "{{ s3_storage_info.container.NetworkSettings.Networks.nexus.IPAddress }}"

    - name: Configure MinIO CLI
      ansible.builtin.command: |
        mc alias set s3-storage http://localhost:9000 minioadmin minioadmin
      register: minio_cli_configured
      changed_when: "'s3-storage' not in minio_cli_configured.stdout"

    - name: Show minio_cli_configured
      ansible.builtin.debug:
        var: minio_cli_configured

    - name: Create S3 bucket in MinIO for Nexus
      ansible.builtin.command: >
        mc mb s3-storage/nexus-storage
      when: minio_cli_configured.stdout is not search('successfully')

    - name: Create new access keys (service account) for Nexus
      ansible.builtin.command: >
        mc admin user add s3-storage nexus-user nexus-password

    - name: Attach readwrite policy to new access keys
      command: >
        mc admin policy attach s3-storage readwrite --user nexus-user
      register: attach_policy_result

    - name: Create service account (access key) for existing user
      command: >
        mc admin user svcacct add s3-storage nexus-user --access-key nexus-access-key --secret-key nexus-secret-key
      register: svcacct_result
      tags: minio